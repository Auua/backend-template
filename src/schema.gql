# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AggregateItem {
  _avg: ItemAvgAggregate
  _count: ItemCountAggregate
  _max: ItemMaxAggregate
  _min: ItemMinAggregate
  _sum: ItemSumAggregate
}

type AuthResponse {
  accessToken: String!
  refreshToken: String!
  user: User!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  isSet: Boolean
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

type Item {
  count: Int
  createdAt: DateTime!
  description: String
  id: ID!
  name: String!
  updatedAt: DateTime!
}

type ItemAvgAggregate {
  count: Float
}

input ItemAvgAggregateInput {
  count: Boolean
}

type ItemCountAggregate {
  _all: Int!
  count: Int!
  createdAt: Int!
  description: Int!
  id: Int!
  name: Int!
  updatedAt: Int!
}

input ItemCountAggregateInput {
  _all: Boolean
  count: Boolean
  description: Boolean
  id: Boolean
  name: Boolean
}

input ItemCreateInput {
  count: Int
  description: String
  name: String!
}

type ItemMaxAggregate {
  count: Int
  createdAt: DateTime
  description: String
  id: String
  name: String
  updatedAt: DateTime
}

input ItemMaxAggregateInput {
  count: Boolean
  description: Boolean
  id: Boolean
  name: Boolean
}

type ItemMinAggregate {
  count: Int
  createdAt: DateTime
  description: String
  id: String
  name: String
  updatedAt: DateTime
}

input ItemMinAggregateInput {
  count: Boolean
  description: Boolean
  id: Boolean
  name: Boolean
}

input ItemOrderByWithRelationInput {
  count: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
}

enum ItemScalarFieldEnum {
  count
  createdAt
  description
  id
  name
  updatedAt
}

type ItemSumAggregate {
  count: Int
}

input ItemSumAggregateInput {
  count: Boolean
}

input ItemUpdateInput {
  count: NullableIntFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input ItemUpdateManyMutationInput {
  count: NullableIntFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input ItemWhereInput {
  AND: [ItemWhereInput!]
  NOT: [ItemWhereInput!]
  OR: [ItemWhereInput!]
  count: IntNullableFilter
  description: StringNullableFilter
  id: StringFilter
  name: StringFilter
}

input ItemWhereUniqueInput {
  id: String
}

type Mutation {
  createItem(data: ItemCreateInput!): Item!
  createUser(data: UserCreateInput!): User!
  login(loginUserInput: UserLoginCredentialsCompoundUniqueInput!): AuthResponse!
  logout: Boolean!
  refresh: AuthResponse!
  removeItem(where: ItemWhereUniqueInput!): Item!
  removeUser(where: UserWhereUniqueInput!): User!
  signUp(data: UserCreateInput!): AuthResponse!
  updateItem(data: ItemUpdateInput!, where: ItemWhereUniqueInput!): Item!
  updateManyItems(data: ItemUpdateManyMutationInput!, where: ItemWhereInput): Boolean!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NullableIntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
  unset: Boolean
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Query {
  count(_avg: ItemAvgAggregateInput, _count: ItemCountAggregateInput, _max: ItemMaxAggregateInput, _min: ItemMinAggregateInput, _sum: ItemSumAggregateInput, cursor: ItemWhereUniqueInput, orderBy: [ItemOrderByWithRelationInput!], skip: Int, take: Int, where: ItemWhereInput): AggregateItem!
  item(where: ItemWhereUniqueInput!): Item!
  items(cursor: ItemWhereUniqueInput, distinct: [ItemScalarFieldEnum!], orderBy: [ItemOrderByWithRelationInput!], skip: Int, take: Int, where: ItemWhereInput): [Item!]!
  uniqueUser(where: UserWhereUniqueInput!): User!
  user(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): User!
  users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
}

enum QueryMode {
  default
  insensitive
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type User {
  createdAt: DateTime!
  email: String!
  id: ID!
  name: String!

  """hashed refresh token"""
  refreshToken: String
  updatedAt: DateTime!
}

input UserCreateInput {
  email: String!
  name: String!
  password: String!
  refreshToken: String
}

input UserLoginCredentialsCompoundUniqueInput {
  email: String!
  password: String!
}

input UserOrderByWithRelationInput {
  email: SortOrder
  id: SortOrder
  name: SortOrder
  password: SortOrder
  refreshToken: SortOrder
}

enum UserScalarFieldEnum {
  createdAt
  email
  id
  name
  password
  refreshToken
  updatedAt
}

input UserUpdateInput {
  email: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  refreshToken: NullableStringFieldUpdateOperationsInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  email: StringFilter
  id: StringFilter
  name: StringFilter
  password: StringFilter
  refreshToken: StringNullableFilter
}

input UserWhereUniqueInput {
  email: String
  id: String
  loginCredentials: UserLoginCredentialsCompoundUniqueInput
}